
#include <iostream>
using namespace std;

/*
제어구조 : 프로그램의 실행의 흐름을 제어하는 구문으로 만든 구조. 세가지 구조로 모든 프로그램을 제어할 수 있다.
-순차처리 : 위에서부터 아래로 순차적으로 명령문들을 차례차례 실행하는 제어구조.
-판단 : 조건의 결과가 참인지 거짓인지에 따라 실행의 흐름에 분기를 만드는 제어구조.
-반복 : 임의의 명령문들을 반복해서 실행하는 제어구조.

여기서는 if 예약어(reserved keyword)를 이용한 판단제어구조를 살펴보자.
*/

/*
*윈도우 콘솔 응용프로그램
콘솔: 문자열의 입출력을 통해 진행되는 프로그램
윈도우 콘솔 응용프로그램의 시작점 : 메인 함수
호출은 운영체제

프로그래밍 언어의 기본적인 구성요소 3가지 
-타입 : 자료의 형태, '메모리'를 무엇인가로 어떻게 다룰 건지에 대한 규칙
-연산자 : 임의의 두 개의 대상을 결합하며 하나의 결과를 만들어내는 것 + @
-제어구조 : 프로그램의 '실행의 흐름'을 제어하는 구문들로 만들어진 구조 
*/
int main()
{
    //변수의 선언과 초기화
    int tA = 3;
    int tB = 2;

    /*
    조건 : 참, 거짓 둘 중 하나가 산출된다.

    if(조건)
    {
        조건이 참인 경우 이 지역의 명령문들을 실행한다.
    }
    
    */

    if (tA == tB)
    {
        cout << "tA와 tB가 같습니다." << endl;
    }

    if (tA == tB)
    {
        //조건이 참이면 이 지역을 실행
        cout << "tA와 tB가 같습니다." << endl;
    }
    else
    {
        //조건이 거짓이면 이 지역을 실행
        cout << "tA와 tB가 다릅니다." << endl;
    }
    //'비교연산자'는 좌변 우변 모두 값으로 취급한다.
    if (tA == tB)
    {
        cout << "tA와 tB가 같습니다." << endl;
    }

    if (tA > tB)
    {
        cout << "tA가 tB보다 큽니다." << endl;
    }

    if (tA < tB)
    {
        cout << "tA가 tB보다 작습니다." << endl;
    }

    //if~else if~else if~else~
    //else if는 원하는만큼 추가가능
    //else는 생략가능
    if (tA == tB)
    {
        cout << "tA와 tB가 같습니다." << endl;
    }
    else if (tA>tB)
    {
        cout << "tA가 tB보다 큽니다." << endl;    
        //조건이 참일때까지 조건 검사하고, 맞는 조건이 나오면 해당 지역의 명령문을 실행 후 전체 if~else if~구조를 빠져나간다.
    }
    else if (tA<tB)
    {
        cout << "tA가 tB보다 작습니다." << endl;
    }
    /*else
    {

    }*/




    return 0;
}


