구조화 프로그래밍 structured programming
: 함수와 구조체 등의 구조를 만들어 프로그램 구조를 작성하는 방법론

객체지향 프로그래밍 Object Oriened Programming
: 클래스 간 관계, 객체 간 관계를 가지고 프로그램 구조를 작성하는 방법론
     -OOP Object Oriented Programming 의 4가지 특징
        
        추상화 abstraction         데이터의 추상화 + 코드의 추상화 ---> 데이터의 추상화
        은닉화 encapsulation       data hiding 멤버함수 뒤로 멤버변수를 감춘다. 변경의 국지화
        ==========================추상화, 은닉화 ===> object의 근간
        상속성 inheritance         공통된 특성을 부모클래스에 두고 자식클래스는 이를 이어받아 작성하는 것. 코드의 효율적인 재사용reuse
        다형성 polymorphism        같은 메시지의 다른 반응.      override + virtual + 부모클래스 포인터 타입


일반화 프로그래밍 General Programming
: 타입을 매개변수화하여 다루는 기법


Design Pattern
: 'OOP'에서의 모범답안집


Singleton Pattern
: 객체의 최대 생성갯수를 1개로 제한하는 패턴

싱글톤 패턴을 만드는 방법
	i) 해당 클래스 타입의 멤버변수 mpInstance를 static으로 선언한다.
	ii) 생성자와 소멸자는 public이 아니다.
	iii) GetInstance() 함수의 정의에는 객체의 최대 생성갯수를 1개로 제한하는 판단제어구조를 위치시킨다.



-Template : cpp 일반화프로그래밍 도구

사용법:

template<typename T>
------함수, 클래스 정의------


specialize :

template<>
------원하는 타입에 대해서 함수나 클래스 정의------


-vector (STL)
STL : 템플릿을 이용하여 만들어진 함수와 클래스의 모음집
    구성요소( 컨테이너, 반복자, 알고리즘)
	컨테이너 : 일반화된 자료구조
	반복자 : 일반화된 포인터
	알고리즘 
vector : 가변배열(컨테이너)

vector<타입> 배열이름;

-cpp11 array

사용법:
array<타입, 원소 수> 이름

begin(), end() 등과 같은 STL 문법을 사용할 수 있다.


-함수객체 functor

사용법:

class 함수객체이름
{
public:
     //'함수호출연산자'()를 오버로드
	반환타입 operator()(매개변수) {정의}
}
